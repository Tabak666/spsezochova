object Main extends App {
  val dimension = 3
  val screen =
    """|0:100,125, 56,200
       |1:255, 0, 0
       |2: 0,135,200
       |3:220, 12, 0,100
       |4: 45, 97, 0
       |5: 0, 0, 0
       |6: 0, 0, 0,0
       |7: 0, 0, 0
       |8:255,255,255
       |""".stripMargin

  case class Pixel(pos: Pos, props: Props)
  case class Props(red: Int, green: Int, blue: Int, col: Option[Int])
  case class Pos(y: Int, x: Int)

  val pixels: List[Pixel] = screen
    .split("\n")
    .map(_.replace(" ", ""))
    .map(parsePixel)
    .toList

  val red: Map[Int, Pixel] = pixels
    .groupBy(_.pos.y)
    .map(maxRedPixel)
  println("max red --> " + red)

  val col: Map[Int, Int] = pixels
    .groupBy(_.pos.y)
    .map(maxColPixel)
  println("max col --> " + col)

  private def parsePixel(line: String): Pixel = {
    line match {
      case s"$id:$red,$green,$blue,$col" => Pixel(Pos(id.toInt / dimension, id.toInt % dimension), Props(red.toInt, green.toInt, blue.toInt, col.toIntOption))
      case s"$id:$red,$green,$blue" => Pixel(Pos(id.toInt / dimension, id.toInt % dimension), Props(red.toInt, green.toInt, blue.toInt, None))
    }
  }

  private def maxRedPixel(rowPixel: (Int, List[Pixel])): (Int, Pixel) = {
    val (row, pixels) = rowPixel
    (row, pixels.maxBy(_.props.red))
  }

  private def maxColPixel(rowPixel: (Int, List[Pixel])): (Int, Int) = {
    val (row, pixels) = rowPixel
    val colPixel = pixels.filter(_.props.col.isDefined).maxBy(_.props.col.get)
    (row, colPixel.pos.x)
  }
}
